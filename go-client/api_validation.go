
/*
 * CPQ
 *
 * CPQ Web API Documentation
 *
 * API version: 2.9.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ValidationApiService service

/* 
ValidationApiService
Validate a framework contract rule set.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param isCreate Indicates if the rule set we are validating is a new rule set or an update to an existing one. If this is true then there should be no existing contract rule set entries which have the same fc_Id in the database
 * @param contract The framework contract rule set in JSON format that is to be validated.
 * @param contentType Specifies the format of the data that is being sent to the API. Only JSON data is accepted
 * @param optional nil or *ValidationApiApiContractValidatePostOpts - Optional Parameters:
     * @param "ClientRequestSource" (optional.String) -  The client request header that identifies which client had made a request to CPQ Server.
     * @param "CpqLanguage" (optional.String) -  The language code (in ISO 639-1 format) that error messages are to be translated to for returning back to the client. If not supplied it defaults to en-GB
     * @param "PerformTransformation" (optional.Bool) -  Perform transformation of referenced product specifications using the given framework contract into transformed specifications or not. If not supplied defaults to false
     * @param "ReturnNegotiatedSpecifications" (optional.Bool) -  Return the transformed specifications in response or not. If not supplied defaults to false


*/

type ValidationApiApiContractValidatePostOpts struct { 
	ClientRequestSource optional.String
	CpqLanguage optional.String
	PerformTransformation optional.Bool
	ReturnNegotiatedSpecifications optional.Bool
}

func (a *ValidationApiService) ApiContractValidatePost(ctx context.Context, isCreate bool, contract ContractModel, contentType string, localVarOptionals *ValidationApiApiContractValidatePostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/contract/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("isCreate", parameterToString(isCreate, ""))
	if localVarOptionals != nil && localVarOptionals.PerformTransformation.IsSet() {
		localVarQueryParams.Add("performTransformation", parameterToString(localVarOptionals.PerformTransformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReturnNegotiatedSpecifications.IsSet() {
		localVarQueryParams.Add("returnNegotiatedSpecifications", parameterToString(localVarOptionals.ReturnNegotiatedSpecifications.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ClientRequestSource.IsSet() {
		localVarHeaderParams["clientRequestSource"] = parameterToString(localVarOptionals.ClientRequestSource.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.CpqLanguage.IsSet() {
		localVarHeaderParams["cpq-language"] = parameterToString(localVarOptionals.CpqLanguage.Value(), "")
	}
	localVarHeaderParams["Content-Type"] = parameterToString(contentType, "")
	// body params
	localVarPostBody = &contract
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
